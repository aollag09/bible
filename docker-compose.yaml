# docker-compose.yml
version: '3.3'
services:

  # NODE, BIBLE BACK END APP 
  api:
    build:
      context: ./api/
      dockerfile: ../deployment/api/Dockerfile
    container_name: api
    environment:
      # Update evironment variable for docker env
      PORT: 3301
      DB_HOST: database
      ES_HOST: elasticsearch
    ports: 
      - '3301:3301'
    networks:
      - network

  # WEB, BIBLE FRONT END WEB APP 
  web:
    build:
      context: ./web/
      dockerfile: ../deployment/web/Dockerfile
    container_name: web
    environment:
      # Update evironment variable for docker env
      BIBLE_API_HOST: api
    ports: 
      - '8080:8080'
    networks:
      - network

  # DATABASE 
  database:
    # Use latest oicial mysql version
    build: deployment/mysql/
    container_name: database

    environment:
      # Configure MySQL environment
      MYSQL_DATABASE: 'bible'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'bible_user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'docker'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'docker'

    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
    volumes:
      # Database volume
      - database-data:/var/lib/mysql
      
    networks:
      - network

  # INDEX 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms1G -Xmx1G"
      - "xpack.security.enabled=false"
      - "http.cors.enabled=true"
      - "http.cors.allow-origin=*"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - network
  
  # KIBANA, DATA VISUALIZATION
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - network
  
  # LOGSTASH, DATA INTEGRATION
  logstash:
    build: deployment/logstash/
    container_name: logstash
    volumes:
      - './deployment/logstash/config:/usr/share/logstash/config'
      - './deployment/logstash/pipelines:/usr/share/logstash/pipelines'
      #- './deployment/logstash/lastrun:/root/.logstash_jdbc_last_run'
    ports:
      - '5001:5001'
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
    env_file:
      - api/.env
    networks:
      - network
    depends_on:
      - elasticsearch
      - database

volumes:
  # database volume
  database-data: 

  # index volumes
  elasticsearch-data:

networks:
  network:
    driver: bridge
