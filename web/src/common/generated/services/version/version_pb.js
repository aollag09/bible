/* eslint-disabled */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
// @ts-ignore
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bible.Version', null, global);
goog.exportSymbol('proto.bible.Versions', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bible.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bible.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bible.Version.displayName = 'proto.bible.Version';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bible.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.bible.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bible.Version} msg The msg instance to transform.
 * @return {!Object}
 */
proto.bible.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    table: msg.getTable(),
    abbreviation: msg.getAbbreviation(),
    language: msg.getLanguage(),
    version: msg.getVersion(),
    infoText: msg.getInfoText(),
    infoUrl: msg.getInfoUrl(),
    publisher: msg.getPublisher(),
    copyright: msg.getCopyright(),
    copyrightInfo: msg.getCopyrightInfo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bible.Version}
 */
proto.bible.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bible.Version;
  return proto.bible.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bible.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bible.Version}
 */
proto.bible.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbbreviation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoText(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublisher(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCopyright(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCopyrightInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.bible.Version} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Version.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bible.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Version.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getTable();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAbbreviation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getInfoText();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getInfoUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getPublisher();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getCopyright();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getCopyrightInfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.bible.Version} The clone.
 */
proto.bible.Version.prototype.cloneMessage = function() {
  return /** @type {!proto.bible.Version} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.bible.Version.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.bible.Version.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string table = 2;
 * @return {string}
 */
proto.bible.Version.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setTable = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string abbreviation = 3;
 * @return {string}
 */
proto.bible.Version.prototype.getAbbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setAbbreviation = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.bible.Version.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.bible.Version.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string info_text = 6;
 * @return {string}
 */
proto.bible.Version.prototype.getInfoText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setInfoText = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string info_url = 7;
 * @return {string}
 */
proto.bible.Version.prototype.getInfoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setInfoUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string publisher = 8;
 * @return {string}
 */
proto.bible.Version.prototype.getPublisher = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setPublisher = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string copyright = 9;
 * @return {string}
 */
proto.bible.Version.prototype.getCopyright = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setCopyright = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string copyright_info = 10;
 * @return {string}
 */
proto.bible.Version.prototype.getCopyrightInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.bible.Version.prototype.setCopyrightInfo = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bible.Versions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bible.Versions.repeatedFields_, null);
};
goog.inherits(proto.bible.Versions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bible.Versions.displayName = 'proto.bible.Versions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bible.Versions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bible.Versions.prototype.toObject = function(opt_includeInstance) {
  return proto.bible.Versions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bible.Versions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.bible.Versions.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.bible.Version.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bible.Versions}
 */
proto.bible.Versions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bible.Versions;
  return proto.bible.Versions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bible.Versions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bible.Versions}
 */
proto.bible.Versions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bible.Version;
      reader.readMessage(value,proto.bible.Version.deserializeBinaryFromReader);
      msg.getVersionsList().push(value);
      msg.setVersionsList(msg.getVersionsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.bible.Versions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Versions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bible.Versions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Versions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bible.Version.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.bible.Versions} The clone.
 */
proto.bible.Versions.prototype.cloneMessage = function() {
  return /** @type {!proto.bible.Versions} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Version versions = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.bible.Version>}
 */
proto.bible.Versions.prototype.getVersionsList = function() {
  return /** @type{!Array.<!proto.bible.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bible.Version, 1));
};


/** @param {Array.<!proto.bible.Version>} value  */
proto.bible.Versions.prototype.setVersionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.bible.Versions.prototype.clearVersionsList = function() {
  this.setVersionsList([]);
};


goog.object.extend(exports, proto.bible);
