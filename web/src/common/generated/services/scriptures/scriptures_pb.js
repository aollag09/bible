/* eslint-disabled */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
// @ts-ignore
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bible.Scripture', null, global);
goog.exportSymbol('proto.bible.Scriptures', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bible.Scripture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bible.Scripture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bible.Scripture.displayName = 'proto.bible.Scripture';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bible.Scripture.prototype.toObject = function(opt_includeInstance) {
  return proto.bible.Scripture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bible.Scripture} msg The msg instance to transform.
 * @return {!Object}
 */
proto.bible.Scripture.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    book: msg.getBook(),
    chapter: msg.getChapter(),
    verse: msg.getVerse(),
    scripture: msg.getScripture()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bible.Scripture}
 */
proto.bible.Scripture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bible.Scripture;
  return proto.bible.Scripture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bible.Scripture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bible.Scripture}
 */
proto.bible.Scripture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBook(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChapter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVerse(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setScripture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.bible.Scripture} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Scripture.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bible.Scripture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Scripture.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBook();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getChapter();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getVerse();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getScripture();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.bible.Scripture} The clone.
 */
proto.bible.Scripture.prototype.cloneMessage = function() {
  return /** @type {!proto.bible.Scripture} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bible.Scripture.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.bible.Scripture.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 book = 2;
 * @return {number}
 */
proto.bible.Scripture.prototype.getBook = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.bible.Scripture.prototype.setBook = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 chapter = 3;
 * @return {number}
 */
proto.bible.Scripture.prototype.getChapter = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.bible.Scripture.prototype.setChapter = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 verse = 4;
 * @return {number}
 */
proto.bible.Scripture.prototype.getVerse = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.bible.Scripture.prototype.setVerse = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string scripture = 5;
 * @return {string}
 */
proto.bible.Scripture.prototype.getScripture = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.bible.Scripture.prototype.setScripture = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bible.Scriptures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bible.Scriptures.repeatedFields_, null);
};
goog.inherits(proto.bible.Scriptures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.bible.Scriptures.displayName = 'proto.bible.Scriptures';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bible.Scriptures.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bible.Scriptures.prototype.toObject = function(opt_includeInstance) {
  return proto.bible.Scriptures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bible.Scriptures} msg The msg instance to transform.
 * @return {!Object}
 */
proto.bible.Scriptures.toObject = function(includeInstance, msg) {
  var f, obj = {
    scripturesList: jspb.Message.toObjectList(msg.getScripturesList(),
    proto.bible.Scripture.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bible.Scriptures}
 */
proto.bible.Scriptures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bible.Scriptures;
  return proto.bible.Scriptures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bible.Scriptures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bible.Scriptures}
 */
proto.bible.Scriptures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bible.Scripture;
      reader.readMessage(value,proto.bible.Scripture.deserializeBinaryFromReader);
      msg.getScripturesList().push(value);
      msg.setScripturesList(msg.getScripturesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.bible.Scriptures} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Scriptures.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bible.Scriptures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.bible.Scriptures.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getScripturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bible.Scripture.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.bible.Scriptures} The clone.
 */
proto.bible.Scriptures.prototype.cloneMessage = function() {
  return /** @type {!proto.bible.Scriptures} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Scripture scriptures = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.bible.Scripture>}
 */
proto.bible.Scriptures.prototype.getScripturesList = function() {
  return /** @type{!Array.<!proto.bible.Scripture>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bible.Scripture, 1));
};


/** @param {Array.<!proto.bible.Scripture>} value  */
proto.bible.Scriptures.prototype.setScripturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.bible.Scriptures.prototype.clearScripturesList = function() {
  this.setScripturesList([]);
};


goog.object.extend(exports, proto.bible);
